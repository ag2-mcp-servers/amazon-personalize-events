# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:58:45+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, constr


class Arn(
    RootModel[constr(pattern=r'arn:([a-z\d-]+):personalize:.*:.*:.+', max_length=256)]
):
    root: constr(pattern=r'arn:([a-z\d-]+):personalize:.*:.*:.+', max_length=256)


class Date(RootModel[datetime]):
    root: datetime


class EventAttributionSource(
    RootModel[
        constr(pattern=r'^[\x20-\x7E]*[\x21-\x7E]+[\x20-\x7E]*$', max_length=1024)
    ]
):
    root: constr(pattern=r'^[\x20-\x7E]*[\x21-\x7E]+[\x20-\x7E]*$', max_length=1024)


class EventPropertiesJSON(RootModel[SecretStr]):
    root: SecretStr


class FloatType(RootModel[float]):
    root: float


class InvalidInputException(RootModel[Any]):
    root: Any


class ItemId(RootModel[SecretStr]):
    root: SecretStr


class ItemProperties(RootModel[SecretStr]):
    root: SecretStr


class MetricAttribution(BaseModel):
    eventAttributionSource: EventAttributionSource


class RecommendationId(RootModel[constr(min_length=1, max_length=40)]):
    root: constr(min_length=1, max_length=40)


class ResourceInUseException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class StringType(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class User(BaseModel):
    properties: Optional[Any] = Field(
        None,
        description='<p>A string map of user-specific metadata. Each element in the map consists of a key-value pair. For example, <code>{"numberOfVideosWatched": "45"}</code>.</p> <p>The keys use camel case names that match the fields in the schema for the Users dataset. In the previous example, the <code>numberOfVideosWatched</code> matches the \'NUMBER_OF_VIDEOS_WATCHED\' field defined in the Users schema. For categorical string data, to include multiple categories for a single user, separate each category with a pipe separator (<code>|</code>). For example, <code>\\"Member|Frequent shopper\\"</code>.</p>',
    )
    userId: StringType


class UserId(RootModel[SecretStr]):
    root: SecretStr


class UserList(RootModel[List[User]]):
    root: List[User] = Field(..., max_length=10, min_length=1)


class UserProperties(RootModel[SecretStr]):
    root: SecretStr


class UsersPostRequest(BaseModel):
    datasetArn: constr(
        pattern=r'arn:([a-z\d-]+):personalize:.*:.*:.+', max_length=256
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the Users dataset you are adding the user or users to.',
    )
    users: List[User] = Field(
        ..., description='A list of user data.', max_length=10, min_length=1
    )


class Impression(RootModel[List[ItemId]]):
    root: List[ItemId] = Field(..., max_length=25, min_length=1)


class Item(BaseModel):
    itemId: StringType
    properties: Optional[Any] = Field(
        None,
        description='<p>A string map of item-specific metadata. Each element in the map consists of a key-value pair. For example, <code>{"numberOfRatings": "12"}</code>.</p> <p>The keys use camel case names that match the fields in the schema for the Items dataset. In the previous example, the <code>numberOfRatings</code> matches the \'NUMBER_OF_RATINGS\' field defined in the Items schema. For categorical string data, to include multiple categories for a single item, separate each category with a pipe separator (<code>|</code>). For example, <code>\\"Horror|Action\\"</code>.</p>',
    )


class ItemList(RootModel[List[Item]]):
    root: List[Item] = Field(..., max_length=10, min_length=1)


class PutItemsRequest(BaseModel):
    datasetArn: Arn
    items: ItemList


class PutUsersRequest(BaseModel):
    datasetArn: Arn
    users: UserList


class ItemsPostRequest(BaseModel):
    datasetArn: constr(
        pattern=r'arn:([a-z\d-]+):personalize:.*:.*:.+', max_length=256
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the Items dataset you are adding the item or items to.',
    )
    items: List[Item] = Field(
        ..., description='A list of item data.', max_length=10, min_length=1
    )


class Event(BaseModel):
    eventId: Optional[StringType] = None
    eventType: StringType
    eventValue: Optional[FloatType] = None
    impression: Optional[Impression] = None
    itemId: Optional[ItemId] = None
    metricAttribution: Optional[MetricAttribution] = None
    properties: Optional[Any] = Field(
        None,
        description='<p>A string map of event-specific data that you might choose to record. For example, if a user rates a movie on your site, other than movie ID (<code>itemId</code>) and rating (<code>eventValue</code>) , you might also send the number of movie ratings made by the user.</p> <p>Each item in the map consists of a key-value pair. For example,</p> <p> <code>{"numberOfRatings": "12"}</code> </p> <p>The keys use camel case names that match the fields in the Interactions schema. In the above example, the <code>numberOfRatings</code> would match the \'NUMBER_OF_RATINGS\' field defined in the Interactions schema.</p>',
    )
    recommendationId: Optional[RecommendationId] = None
    sentAt: Date


class EventList(RootModel[List[Event]]):
    root: List[Event] = Field(..., max_length=10, min_length=1)


class PutEventsRequest(BaseModel):
    eventList: EventList
    sessionId: StringType
    trackingId: StringType
    userId: Optional[UserId] = None


class EventsPostRequest(BaseModel):
    eventList: List[Event] = Field(
        ...,
        description='A list of event data from the session.',
        max_length=10,
        min_length=1,
    )
    sessionId: constr(min_length=1, max_length=256) = Field(
        ...,
        description='The session ID associated with the user\'s visit. Your application generates the sessionId when a user first visits your website or uses your application. Amazon Personalize uses the sessionId to associate events with the user before they log in. For more information, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html">Recording Events</a>.',
    )
    trackingId: constr(min_length=1, max_length=256) = Field(
        ...,
        description='The tracking ID for the event. The ID is generated by a call to the <a href="https://docs.aws.amazon.com/personalize/latest/dg/API_CreateEventTracker.html">CreateEventTracker</a> API.',
    )
    userId: Optional[SecretStr] = Field(
        None, description='The user associated with the event.'
    )
